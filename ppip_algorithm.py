# -*- coding: utf-8 -*-

"""
/***************************************************************************
 PutPointsInPolygons
                                 A QGIS plugin
 Approximates the maximum number of points in polygons for a certain minimum
 distance between the points.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-08-09
        copyright            : (C) 2024 by Christian Lesem
        email                : christian@lesem.eu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Christian Lesem'
__date__ = '2024-08-09'
__copyright__ = '(C) 2024 by Christian Lesem'

SPACING = 500

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis import processing

from qgis.PyQt.QtCore import (QCoreApplication,
                              QVariant)
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterDistance,
                       QgsField,
                       QgsCoordinateReferenceSystem,
                       QgsReferencedRectangle,
                       QgsFeatureRequest,
                       QgsFeature,
                       QgsFields,
                       QgsWkbTypes,
                       QgsVectorLayer)



class PutPointsInPolygonsAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'
    DISTANCE = 'DISTANCE'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr('Input layer'),
                [QgsProcessing.TypeVectorPolygon]
            )
        )

        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Output layer')
            )
        )

        self.addParameter(
            QgsProcessingParameterDistance(
                self.DISTANCE,
                self.tr('Distance between points'),
                500,
                )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.
        source = self.parameterAsSource(parameters, self.INPUT, context)

        SPACING = self.parameterAsInt(parameters, self.DISTANCE, context)
        
        your_fields = QgsFields()
        your_fields.append(QgsField('fid', QVariant.Int))
        your_fields.append(QgsField('NUMPOINTS', QVariant.Int))

        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT,
                context, your_fields, QgsWkbTypes.MultiPoint, source.sourceCrs())
        
        # Compute the number of steps to display within the progress bar and
        # get features from source
        total = 100.0 / source.featureCount() if source.featureCount() else 0
        features = source.getFeatures()




        crs = source.sourceCrs()


        #### the central piece of the script: 
        # iterate over each feature of the input polygon layer and calculate the best
        # arrangement of points
        for current, feature in enumerate(features):
            # Stop the algorithm if cancel button has been clicked
            if feedback.isCanceled():
                break

            f_id = feature.id()

            # select the feature that is currently iterated upon
            # source.selectByExpression(f'"fid"=\'{f_id}\'')
            
            # create point grid for the current feature
            # TODO: create alternating grids, shift grid and rotate grid gradually
            # to ensure the grid fills the polygon even when shifted or rotated,
            # its size has to exceed the bounding box by at least one time the SPACING 
            # value and it should be a circle
            bb = feature.geometry().boundingBox()
            crs_bb = (QgsCoordinateReferenceSystem(int(crs.authid().split(":")[1]), QgsCoordinateReferenceSystem.EpsgCrsId))
            referenced_bb = QgsReferencedRectangle(bb, crs_bb)
            points_lyr = processing.run(
                    "qgis:regularpoints", {
                        'EXTENT': referenced_bb,
                        'SPACING':SPACING,
                        'INSET':0,
                        'RANDOMIZE':False,
                        'IS_SPACING':True,
                        'CRS':QgsCoordinateReferenceSystem(f'EPSG:{crs.authid}'),
                        'OUTPUT':'TEMPORARY_OUTPUT'
                            })["OUTPUT"]
            
            source_lyr = source.materialize(QgsFeatureRequest())
            source_lyr.selectByExpression(f'"fid"=\'{f_id}\'')

            results_lyr = QgsVectorLayer(f'Polygon?crs={crs.authid()}', f'{source.sourceName()}_temp1', 'memory')
            new_feature = QgsFeature()
            new_feature.setGeometry(feature.geometry())
            pr = results_lyr.dataProvider()
            pr.addFeatures([new_feature])
            
            points_clipped_lyr = processing.run(
                    "native:clip", {
                        'INPUT' : points_lyr,
                        'OUTPUT' : 'TEMPORARY_OUTPUT',
                        'OVERLAY' : results_lyr
                    })["OUTPUT"]
            
            counter_lyr = processing.run("native:countpointsinpolygon", {
                        'POLYGONS': results_lyr,
                        'POINTS':points_clipped_lyr,
                        'WEIGHT':'',
                        'CLASSFIELD':'',
                        'FIELD':'NUMPOINTS',
                        'OUTPUT':'TEMPORARY_OUTPUT'})["OUTPUT"]
                        
            numpoints = int(counter_lyr.getFeature(1)["NUMPOINTS"])
            print(f"{f_id}: {numpoints}, total nr. of features: {counter_lyr.featureCount()}")

            
            new_feature = QgsFeature()

            multipart_points_lyr = processing.run(
                "native:collect", {
                    'INPUT':points_clipped_lyr,
                    'FIELD':[],
                    'OUTPUT':'TEMPORARY_OUTPUT'
                    })["OUTPUT"]
                    
            geom = multipart_points_lyr.getFeature(1).geometry()
            new_feature.setGeometry(geom)
            new_feature.setAttributes([f_id, numpoints])
            

            # Add a feature in the sink
            sink.addFeature(new_feature, QgsFeatureSink.FastInsert)

            # Update the progress bar
            feedback.setProgress(int(current * total))


        # Return the results of the algorithm. In this case our only result is
        # the feature sink which contains the processed features, but some
        # algorithms may return multiple feature sinks, calculated numeric
        # statistics, etc. These should all be included in the returned
        # dictionary, with keys matching the feature corresponding parameter
        # or output names.
        return {self.OUTPUT: dest_id}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Put points in polygons'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())
    
    def shortHelpString(self):
        """
        Returns a localised short helper string for the algorithm. This string
        should provide a basic description about what the algorithm does and the
        parameters and outputs associated with it..
        """
        return self.tr("Example algorithm short description")

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Vector analysis'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return PutPointsInPolygonsAlgorithm()
